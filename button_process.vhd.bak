library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity button_process is
    port (
        clk : in  std_logic;
        btn_crono : in  std_logic;  -- cronômetro/pausa/zera
        btn_termo : in  std_logic;  -- termômetro
        btn_psico : in  std_logic;  -- psicômetro
        btn_altim : in  std_logic;  -- altímetro
        ctrl : out std_logic_vector(3 downto 0)  -- saída que indica botão que foi pressionado
    );
end button_process;

architecture arch_botao of button_process is
    -- registradores para armazenar o estado anterior de cada botão
    signal btn_crono_reg, btn_termo_reg, btn_psico_reg, btn_altim_reg : std_logic;
begin
    -- armazenar o estado anterior dos botões
    process(clk)
    begin
        if rising_edge(clk) then
            btn_crono_reg <= btn_crono;
            btn_termo_reg <= btn_termo;
            btn_psico_reg <= btn_psico;
            btn_altim_reg <= btn_altim;
        end if;
    end process;

    -- detectar a borda de descida e define 'ctrl'
    process(btn_crono, btn_termo, btn_psico, btn_altim, btn_crono_reg, btn_termo_reg, btn_psico_reg, btn_altim_reg)
    begin
        if (btn_crono_reg = '1' and btn_crono = '0') then
            ctrl <= "0001";  -- botão cronômetro/pausa/zera
        elsif (btn_termo_reg = '1' and btn_termo = '0') then
            ctrl <= "0010";  -- botão termômetro
        elsif (btn_psico_reg = '1' and btn_psico = '0') then
            ctrl <= "0011";  -- botão psicômetro
        elsif (btn_altim_reg = '1' and btn_altim = '0') then
            ctrl <= "0100";  -- botão altímetro
        else
            ctrl <= "0000";
        end if;
    end process;

end arch_botao;
